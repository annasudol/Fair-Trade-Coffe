const truffleAssert = require('truffle-assertions');


// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei('1', "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addFarmer(originFarmerID)
        // Declare and Initialize a variable for event
        // var eventEmitted = false
        
        // // Watch the emitted event Harvested()
        // var event = supplyChain.Harvested()
        // console.log(event)
        // await event.watch((err, res) => {
        //     eventEmitted = true
        // })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from: originFarmerID})
        const events = await supplyChain.getPastEvents('Harvested')
        const eventEmitted = events[0].event === 'Harvested'
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {    
        const supplyChain = await SupplyChain.deployed()    
        // Declare and Initialize a variable for event
        let processEvent    
        //Reverts incorrect Role
        await truffleAssert.reverts(supplyChain.processItem(upc, {from: distributorID}), 'Incorrect role for current process.')
        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc, {from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItemBufferTwo(upc)
        processEvent = await supplyChain.getPastEvents('Processed')
        // Verify the result set
        assert.equal(item.itemState, 1, 'Error: Invalid item State')
        assert.equal(processEvent[0].event, 'Processed', "Wrong/No event emitted")
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {  
        const supplyChain = await SupplyChain.deployed()       
        // Declare and Initialize a variable for event
        let packEvent;
        //Reverts incorrect Role
        await truffleAssert.reverts(supplyChain.packItem(upc, {from: distributorID}), 'Incorrect role for current process.')

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, {from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItemBufferTwo(upc)
        processEvent = await supplyChain.getPastEvents('Packed')

        // Verify the result set
        assert.equal(item.itemState, 2, 'Error: Invalid item State')
        assert.equal(processEvent[0].event, 'Packed', "Wrong/No event emitted")
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {        
        const supplyChain = await SupplyChain.deployed() 
        // Declare and Initialize a variable for event
        let forSaleEvent
        //Reverts incorrect Role
        await truffleAssert.reverts(supplyChain.sellItem(upc, productPrice, {from: distributorID}), 'Incorrect role for current process.')
        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, {from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItemBufferTwo(upc)
        forSaleEvent = await supplyChain.getPastEvents('ForSale')

        // Verify the result set
        assert.equal(item.itemState, 3, 'Error: Invalid item State')
        assert.equal(forSaleEvent[0].event, 'ForSale', "Wrong/No event emitted")
        assert.equal(item.productPrice, productPrice, "Incorrect Product Price")
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()         // Declare and Initialize a variable for event
        let buyEvent
        let addDistEvent
        await supplyChain.addDistributor(distributorID)
        // //Reverts incorrect Role
        await truffleAssert.reverts(supplyChain.buyItem(upc, {from: originFarmerID, value: productPrice}), 'Incorrect role for current process.')
        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {from: distributorID, value: productPrice});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItemBufferTwo(upc)
        buyEvent = await supplyChain.getPastEvents('Sold')
        addDistEvent = await supplyChain.getPastEvents('distributorAdded', {fromBlock: 0, toBlock: "latest"})
        // Verify the result set
        assert.equal(item.itemState, 4, 'Error: Invalid item State')
        assert.equal(addDistEvent[0].event, 'distributorAdded', "Wrong/No event emitted")
        assert.equal(buyEvent[0].event, 'Sold', "Wrong/No event emitted")
        assert.equal(item.distributorID, distributorID,"Incorrect distributor ID")
    })    

    // 6th Test 
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {        
        const supplyChain = await SupplyChain.deployed() 
        // Declare and Initialize a variable for event
        let shipEvent
        // Revert incorrect role
        await truffleAssert.reverts(supplyChain.shipItem(upc, {from: originFarmerID}), 'Incorrect role for current process.')
        // Mark an item as Sold by calling function buyItem()
        await supplyChain.shipItem(upc, {from: distributorID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItemBufferTwo(upc)
        shipEvent = await supplyChain.getPastEvents('Shipped')
        // Verify the result set
        assert.equal(item.itemState, 5, 'Error: Invalid item State')
        assert.equal(shipEvent[0].event, "Shipped", "Wrong event emitted") 
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {   
        const supplyChain = await SupplyChain.deployed()      
        // Declare and Initialize a variable for event
        let reveivedEvent
        await supplyChain.addRetailer(retailerID)
        // Reverts incorrect Role
        await truffleAssert.reverts(supplyChain.receiveItem(upc, {from: originFarmerID}), 'Incorrect role for current process.')
        // Mark an item as Sold by calling function buyItem()
        await supplyChain.receiveItem(upc, {from: retailerID});
        receivedEvent = await supplyChain.getPastEvents("Received")
        const item_1 = await supplyChain.fetchItemBufferOne(upc)
        const item_2 = await supplyChain.fetchItemBufferTwo(upc)
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        assert.equal(item_2.itemState, 6, "Error: Invalid item state.")
        assert.equal(receivedEvent[0].event, "Received", "Wrong event emitted")
        assert.equal(item_1.ownerID, retailerID, "Retailer is not the owner")
        assert.equal(item_2.retailerID, retailerID, "Retailer ID not set")
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {       
        const supplyChain = await SupplyChain.deployed()  
        // Declare and Initialize a variable for event
        let purchasedEvent
        await supplyChain.addConsumer(consumerID)        
        // Mark an item as Sold by calling function buyItem()
        await truffleAssert.reverts(supplyChain.purchaseItem(upc, {from: originFarmerID}), 'Incorrect role for current process.')
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        await supplyChain.purchaseItem(upc, {from: consumerID})
        purchasedEvent = await supplyChain.getPastEvents("Purchased")
        const item_1 = await supplyChain.fetchItemBufferOne(upc)
        const item_2 = await supplyChain.fetchItemBufferTwo(upc)
        // Verify the result set
        assert.equal(item_2.itemState, 7, "Error: Invalid item state.")
        assert.equal(purchasedEvent[0].event, "Purchased", "Wrong event emitted")
        assert.equal(item_1.ownerID, consumerID, "Retailer is not the owner")
        assert.equal(item_2.consumerID, consumerID, "Retailer ID not set")
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed() 
        // Retrieve the just now saved item from blockchain by calling function fetchItem() test that other roles can call.
        const item_1 = await supplyChain.fetchItemBufferOne(upc, {from: consumerID})
        
        // Verify the result set:
        assert.equal(item_1.itemSKU, upc, "incorrect sku")
        assert.equal(item_1.itemUPC, sku, "incorrect upc")
        assert.equal(item_1.ownerID, consumerID, "incorrect ownerID")
        assert.equal(item_1.originFarmerID, originFarmerID, "incorrect farmer address")
        assert.equal(item_1.originFarmName, originFarmName, "incorrect farm name")
        assert.equal(item_1.originFarmInformation, originFarmInformation, "incorrect farm information")
        assert.equal(item_1.originFarmLatitude, originFarmLatitude, "incorrect farm latitude")
        assert.equal(item_1.originFarmLongitude, originFarmLongitude, "incorrect farm longitude")
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed() 
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item_2 = await supplyChain.fetchItemBufferTwo(upc)
        // Verify the result set:
        assert.equal(item_2.itemSKU, upc, "incorrect sku")
        assert.equal(item_2.itemUPC, sku, "incorrect upc")
        assert.equal(item_2.productID, productID, 'incorrect productID')
        assert.equal(item_2.productNotes, productNotes, 'incorrect product notes')
        assert.equal(item_2.productPrice, productPrice, 'incorrect product price')
        assert.equal(item_2.itemState, 7, 'Producted not in purchased state')
        assert.equal(item_2.distributorID, distributorID, 'incorrect distributor address')
        assert.equal(item_2.retailerID, retailerID, 'incorrect retailer address')
        assert.equal(item_2.consumerID, consumerID, 'incorrect consumer address')
    })

});

